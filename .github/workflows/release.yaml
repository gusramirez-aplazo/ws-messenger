name: releaseing ws-messenger
run-name: ${{ github.actor }} is triggering a release

on:
  push:
    tags:
      - v*

permissions:
  contents: read # for checkout

env:
  REGISTRY: ${{ secrets.REGISTRY }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  MSGR_PORT: ${{ secrets.MSGR_PORT }}
  CONTAINER_REGISTRY_TOKEN: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}
  CONTAINER_REGISTRY_USERNAME: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
  CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}
  S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
  S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
  MISA_MAPS_URL: ${{ secrets.MISA_MAPS_URL }}
  KIDS_WORLD_URL: ${{ secrets.KIDS_WORLD_URL }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance

    steps:
      - name: Checkout main
        uses: actions/checkout@v2

      - name: Update SHA
        run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/site/_meta

      - name: Build container image
        run: make build

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: $CONTAINER_REGISTRY_TOKEN

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: make push

  deploy:
    needs: build_and_push

    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_TOKEN }}
          envs: CLOUDFLARE_R2_URL,S3_ACCESS_KEY_ID,S3_SECRET_ACCESS_KEY,MISA_MAPS_URL,IMAGE_NAME,MSGR_PORT,CONTAINER_REGISTRY_TOKEN,CONTAINER_REGISTRY_USERNAME,GITHUB_SHA
          script: |
            # Login to registry
            make login
            # Stop running container
            make stop
            # Remove old container
            make remove
            # Run a new container from a new image
            make run
